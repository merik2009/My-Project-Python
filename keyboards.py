from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from typing import List, Dict, Optional

class BotKeyboards:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è Telegram –±–æ—Ç–∞"""
    
    @staticmethod
    def main_menu() -> InlineKeyboardMarkup:
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞"""
        keyboard = [
            [
                InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å n8n", callback_data="status"),
                InlineKeyboardButton("üìã –†–∞–±–æ—á–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã", callback_data="workflows")
            ],
            [
                InlineKeyboardButton("üöÄ –í—ã–ø–æ–ª–Ω–µ–Ω–∏—è", callback_data="executions"),
                InlineKeyboardButton("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", callback_data="management")
            ],
            [
                InlineKeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="statistics"),
                InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")
            ]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    def workflows_menu() -> InlineKeyboardMarkup:
        """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—á–∏–º–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏"""
        keyboard = [
            [
                InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö", callback_data="list_workflows"),
                InlineKeyboardButton("‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–µ", callback_data="active_workflows")
            ],
            [
                InlineKeyboardButton("‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ", callback_data="inactive_workflows"),
                InlineKeyboardButton("üîç –ü–æ–∏—Å–∫", callback_data="search_workflow")
            ],
            [
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
            ]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    def workflow_actions(workflow_id: str, is_active: bool) -> InlineKeyboardMarkup:
        """–î–µ–π—Å—Ç–≤–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞"""
        keyboard = []
        
        if is_active:
            keyboard.append([
                InlineKeyboardButton("‚è∏Ô∏è –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"deactivate_{workflow_id}"),
                InlineKeyboardButton("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å", callback_data=f"execute_{workflow_id}")
            ])
        else:
            keyboard.append([
                InlineKeyboardButton("‚ñ∂Ô∏è –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"activate_{workflow_id}"),
                InlineKeyboardButton("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å", callback_data=f"execute_{workflow_id}")
            ])
        
        keyboard.extend([
            [
                InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å", callback_data=f"status_{workflow_id}"),
                InlineKeyboardButton("üìã –í—ã–ø–æ–ª–Ω–µ–Ω–∏—è", callback_data=f"executions_{workflow_id}")
            ],
            [
                InlineKeyboardButton("üîô –ö —Å–ø–∏—Å–∫—É", callback_data="list_workflows"),
                InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–∞—è", callback_data="main_menu")
            ]
        ])
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    def executions_menu() -> InlineKeyboardMarkup:
        """–ú–µ–Ω—é –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π"""
        keyboard = [
            [
                InlineKeyboardButton("üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ", callback_data="recent_executions"),
                InlineKeyboardButton("‚úÖ –£—Å–ø–µ—à–Ω—ã–µ", callback_data="successful_executions")
            ],
            [
                InlineKeyboardButton("‚ùå –û—à–∏–±–∫–∏", callback_data="failed_executions"),
                InlineKeyboardButton("‚è≥ –í—ã–ø–æ–ª–Ω—è—é—â–∏–µ—Å—è", callback_data="running_executions")
            ],
            [
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
            ]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    def execution_actions(execution_id: str, status: str) -> InlineKeyboardMarkup:
        """–î–µ–π—Å—Ç–≤–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        keyboard = [
            [InlineKeyboardButton("üìä –î–µ—Ç–∞–ª–∏", callback_data=f"execution_details_{execution_id}")]
        ]
        
        if status in ["running", "waiting"]:
            keyboard[0].append(
                InlineKeyboardButton("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data=f"stop_execution_{execution_id}")
            )
        
        keyboard.extend([
            [
                InlineKeyboardButton("üîô –ö —Å–ø–∏—Å–∫—É", callback_data="recent_executions"),
                InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–∞—è", callback_data="main_menu")
            ]
        ])
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    def management_menu() -> InlineKeyboardMarkup:
        """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        keyboard = [
            [
                InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ", callback_data="refresh_all"),
                InlineKeyboardButton("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ", callback_data="stop_all")
            ],
            [
                InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏", callback_data="clear_logs"),
                InlineKeyboardButton("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")
            ],
            [
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
            ]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    def confirmation(action: str, item_id: Optional[str] = None) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è"""
        callback_confirm = f"confirm_{action}_{item_id}" if item_id else f"confirm_{action}"
        callback_cancel = f"cancel_{action}_{item_id}" if item_id else f"cancel_{action}"
        
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –î–∞", callback_data=callback_confirm),
                InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data=callback_cancel)
            ]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    def back_to_main() -> InlineKeyboardMarkup:
        """–ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    def pagination(current_page: int, total_pages: int, prefix: str) -> InlineKeyboardMarkup:
        """–ü–∞–≥–∏–Ω–∞—Ü–∏—è –¥–ª—è —Å–ø–∏—Å–∫–æ–≤"""
        keyboard = []
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        nav_buttons = []
        if current_page > 1:
            nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥", callback_data=f"{prefix}_page_{current_page-1}"))
        
        nav_buttons.append(InlineKeyboardButton(f"{current_page}/{total_pages}", callback_data="noop"))
        
        if current_page < total_pages:
            nav_buttons.append(InlineKeyboardButton("–°–ª–µ–¥ ‚û°Ô∏è", callback_data=f"{prefix}_page_{current_page+1}"))
        
        if nav_buttons:
            keyboard.append(nav_buttons)
        
        # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")])
        
        return InlineKeyboardMarkup(keyboard)
