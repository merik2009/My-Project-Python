import os
import logging
import asyncio
from datetime import datetime
from typing import Dict, List, Optional

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler, 
    ContextTypes, MessageHandler, filters
)
from telegram.constants import ParseMode

from dotenv import load_dotenv
from config import Config
from n8n_client import N8NClient
from keyboards import BotKeyboards
from bot_handlers import BotHandlers

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class N8NTelegramBot(BotHandlers):
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å Telegram –±–æ—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è n8n"""
    
    def __init__(self):
        self.config = Config()
        self.n8n_client = N8NClient(self.config.N8N_BASE_URL, self.config.N8N_API_KEY or "")
        self.keyboards = BotKeyboards()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        logging.getLogger().setLevel(self.config.LOG_LEVEL)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–æ—Ç–∞
        self.application = Application.builder().token(self.config.TELEGRAM_BOT_TOKEN or "").build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self._register_handlers()
    
    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ –∫–Ω–æ–ø–æ–∫"""
        # –ö–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("status", self.status_command))
        self.application.add_handler(CommandHandler("workflows", self.workflows_command))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫
        self.application.add_handler(CallbackQueryHandler(self.button_handler))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.text_handler))
    
    def _check_user_permission(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return self.config.is_user_allowed(user_id)
    
    async def _send_unauthorized_message(self, update: Update):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–µ –ø—Ä–∞–≤"""
        await update.message.reply_text(
            "üö´ *–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!*\n\n"
            "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞.\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞.",
            parse_mode=ParseMode.MARKDOWN
        )
    
    def _format_workflow_info(self, workflow: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞–±–æ—á–µ–º –ø—Ä–æ—Ü–µ—Å—Å–µ"""
        name = workflow.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        workflow_id = workflow.get('id', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        active = workflow.get('active', False)
        status_icon = "‚úÖ" if active else "‚ùå"
        
        created = workflow.get('createdAt', '')
        if created:
            try:
                created_date = datetime.fromisoformat(created.replace('Z', '+00:00'))
                created_str = created_date.strftime('%d.%m.%Y %H:%M')
            except:
                created_str = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        else:
            created_str = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        return (
            f"{status_icon} *{name}*\n"
            f"üÜî ID: `{workflow_id}`\n"
            f"üìÖ –°–æ–∑–¥–∞–Ω: {created_str}\n"
            f"üîÑ –°—Ç–∞—Ç—É—Å: {'–ê–∫—Ç–∏–≤–µ–Ω' if active else '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}"
        )
    
    def _format_execution_info(self, execution: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏"""
        execution_id = execution.get('id', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        workflow_name = execution.get('workflowData', {}).get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π workflow')
        status = execution.get('finished', False)
        success = execution.get('success', False)
        
        if status:
            status_icon = "‚úÖ" if success else "‚ùå"
            status_text = "–ó–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ" if success else "–ó–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–æ–π"
        else:
            status_icon = "‚è≥"
            status_text = "–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è"
        
        started = execution.get('startedAt', '')
        if started:
            try:
                started_date = datetime.fromisoformat(started.replace('Z', '+00:00'))
                started_str = started_date.strftime('%d.%m.%Y %H:%M:%S')
            except:
                started_str = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        else:
            started_str = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        return (
            f"{status_icon} *{workflow_name}*\n"
            f"üÜî ID: `{execution_id}`\n"
            f"‚è∞ –ó–∞–ø—É—â–µ–Ω–æ: {started_str}\n"
            f"üìä –°—Ç–∞—Ç—É—Å: {status_text}"
        )
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        user_id = update.effective_user.id
        
        if not self._check_user_permission(user_id):
            await self._send_unauthorized_message(update)
            return
        
        username = update.effective_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        
        welcome_message = (
            f"ü§ñ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {username}!*\n\n"
            "üéØ –Ø –ø–æ–º–æ–≥—É –≤–∞–º —É–ø—Ä–∞–≤–ª—è—Ç—å n8n workflows —á–µ—Ä–µ–∑ Telegram!\n\n"
            "üìã *–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*\n"
            "‚Ä¢ üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–∞ n8n\n"
            "‚Ä¢ üîÑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—á–∏–º–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏\n"
            "‚Ä¢ üöÄ –ó–∞–ø—É—Å–∫ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ workflows\n"
            "‚Ä¢ üìà –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π\n"
            "‚Ä¢ ‚öôÔ∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"
        )
        
        await update.message.reply_text(
            welcome_message,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=self.keyboards.main_menu()
        )
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
        user_id = update.effective_user.id
        
        if not self._check_user_permission(user_id):
            await self._send_unauthorized_message(update)
            return
        
        help_text = (
            "üÜò *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É n8n Manager*\n\n"
            "*–ö–æ–º–∞–Ω–¥—ã:*\n"
            "‚Ä¢ `/start` - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "‚Ä¢ `/help` - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
            "‚Ä¢ `/status` - –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ n8n\n"
            "‚Ä¢ `/workflows` - –°–ø–∏—Å–æ–∫ —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤\n\n"
            "*–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:*\n"
            "üîπ *–°—Ç–∞—Ç—É—Å n8n* - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞\n"
            "üîπ *–†–∞–±–æ—á–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã* - –ø—Ä–æ—Å–º–æ—Ç—Ä –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ workflows\n"
            "üîπ *–í—ã–ø–æ–ª–Ω–µ–Ω–∏—è* - –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—Å–∫–æ–≤ workflows\n"
            "üîπ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ* - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏\n"
            "üîπ *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞* - –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n\n"
            "*–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:*\n"
            "‚Ä¢ –ê–∫—Ç–∏–≤–∞—Ü–∏—è/–¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è workflows\n"
            "‚Ä¢ –ó–∞–ø—É—Å–∫ workflows –≤—Ä—É—á–Ω—É—é\n"
            "‚Ä¢ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—ã–ø–æ–ª–Ω—è—é—â–∏—Ö—Å—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤\n"
            "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –∏ –æ—à–∏–±–æ–∫\n\n"
            "‚ùì –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
        
        await update.message.reply_text(
            help_text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=self.keyboards.back_to_main()
        )
    
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /status"""
        user_id = update.effective_user.id
        
        if not self._check_user_permission(user_id):
            await self._send_unauthorized_message(update)
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≤–µ—Ä–∫–µ
        status_msg = await update.message.reply_text("üîç –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç–∞—Ç—É—Å n8n...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å n8n
        health_status = await self.n8n_client.get_health_status()
        
        if health_status.get('status') == 'healthy':
            status_icon = "üü¢"
            status_text = "–û–Ω–ª–∞–π–Ω"
            color = "üü¢"
        elif health_status.get('status') == 'unhealthy':
            status_icon = "üü°"
            status_text = "–ü—Ä–æ–±–ª–µ–º—ã"
            color = "üü°"
        else:
            status_icon = "üî¥"
            status_text = "–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            color = "üî¥"
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        workflows = await self.n8n_client.get_workflows()
        active_workflows = [w for w in workflows if w.get('active', False)]
        recent_executions = await self.n8n_client.get_executions(limit=5)
        
        status_message = (
            f"{color} *–°—Ç–∞—Ç—É—Å n8n: {status_text}*\n\n"
            f"üåê –°–µ—Ä–≤–µ—Ä: `{self.config.N8N_BASE_URL}`\n"
            f"üìä –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: `{health_status.get('code', 'N/A')}`\n\n"
            f"üìã –í—Å–µ–≥–æ workflows: `{len(workflows)}`\n"
            f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: `{len(active_workflows)}`\n"
            f"‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: `{len(workflows) - len(active_workflows)}`\n\n"
            f"üöÄ –ü–æ—Å–ª–µ–¥–Ω–∏—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π: `{len(recent_executions)}`\n"
            f"‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}"
        )
        
        await status_msg.edit_text(
            status_message,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=self.keyboards.back_to_main()
        )
    
    async def workflows_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /workflows"""
        user_id = update.effective_user.id
        
        if not self._check_user_permission(user_id):
            await self._send_unauthorized_message(update)
            return
        
        await update.message.reply_text(
            "üìã *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—á–∏–º–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=self.keyboards.workflows_menu()
        )
    
    async def text_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = update.effective_user.id
        
        if not self._check_user_permission(user_id):
            await self._send_unauthorized_message(update)
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –ª—é–±–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        await update.message.reply_text(
            "ü§ñ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "/help - –°–ø—Ä–∞–≤–∫–∞\n"
            "/status - –°—Ç–∞—Ç—É—Å n8n\n"
            "/workflows - –†–∞–±–æ—á–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã",
            reply_markup=self.keyboards.main_menu()
        )
    
    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        user_id = query.from_user.id
        
        if not self._check_user_permission(user_id):
            await query.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
            return
        
        await query.answer()
        
        data = query.data
        
        # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        if data == "main_menu":
            await self._show_main_menu(query)
        elif data == "status":
            await self._show_status(query)
        elif data == "workflows":
            await self._show_workflows_menu(query)
        elif data == "executions":
            await self._show_executions_menu(query)
        elif data == "management":
            await self._show_management_menu(query)
        elif data == "statistics":
            await self._show_statistics(query)
        elif data == "help":
            await self._show_help(query)
        
        # –†–∞–±–æ—á–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
        elif data == "list_workflows":
            await self._list_workflows(query)
        elif data == "active_workflows":
            await self._list_workflows(query, active_only=True)
        elif data == "inactive_workflows":
            await self._list_workflows(query, inactive_only=True)
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        elif data == "recent_executions":
            await self._list_executions(query)
        elif data == "successful_executions":
            await self._list_executions(query, success_only=True)
        elif data == "failed_executions":
            await self._list_executions(query, failed_only=True)
        elif data == "running_executions":
            await self._list_executions(query, running_only=True)
        
        # –î–µ–π—Å—Ç–≤–∏—è —Å workflow
        elif data.startswith("activate_"):
            workflow_id = data.split("_", 1)[1]
            await self._activate_workflow(query, workflow_id)
        elif data.startswith("deactivate_"):
            workflow_id = data.split("_", 1)[1]
            await self._deactivate_workflow(query, workflow_id)
        elif data.startswith("execute_"):
            workflow_id = data.split("_", 1)[1]
            await self._execute_workflow(query, workflow_id)
        elif data.startswith("status_"):
            workflow_id = data.split("_", 1)[1]
            await self._show_workflow_status(query, workflow_id)
        
        # –î–µ–π—Å—Ç–≤–∏—è —Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è–º–∏
        elif data.startswith("stop_execution_"):
            execution_id = data.split("_", 2)[2]
            await self._stop_execution(query, execution_id)
        elif data.startswith("execution_details_"):
            execution_id = data.split("_", 2)[2]
            await self._show_execution_details(query, execution_id)
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        elif data == "refresh_all":
            await self._refresh_all(query)
        
        else:
            await query.edit_message_text("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞!")
    
    # –ú–µ—Ç–æ–¥—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–µ–π —á–∞—Å—Ç–∏...
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ n8n Telegram –±–æ—Ç–∞...")
        logger.info(f"üîó n8n URL: {self.config.N8N_BASE_URL}")
        logger.info(f"üë• –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {self.config.ALLOWED_USERS}")
        
        self.application.run_polling()

if __name__ == "__main__":
    try:
        bot = N8NTelegramBot()
        bot.run()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        print("\nüí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:")
        print("1. –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª .env —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏")
        print("2. –£–∫–∞–∑–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π TELEGRAM_BOT_TOKEN")
        print("3. –£–∫–∞–∑–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π N8N_API_KEY")
        print("4. –î–æ–±–∞–≤–ª–µ–Ω—ã ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ ALLOWED_USERS")
