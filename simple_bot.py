#!/usr/bin/env python3
"""
ü§ñ –ü—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è n8n Telegram Bot Manager
–ë–∞–∑–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ —Å–ª–æ–∂–Ω–æ–π —Ç–∏–ø–∏–∑–∞—Ü–∏–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
"""

import os
import logging
import asyncio
from datetime import datetime

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from telegram.constants import ParseMode

from dotenv import load_dotenv
import aiohttp
import requests

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class SimpleN8NBot:
    def __init__(self):
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        self.bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
        self.n8n_url = os.getenv('N8N_BASE_URL', 'http://localhost:5678')
        self.n8n_api_key = os.getenv('N8N_API_KEY')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if not self.bot_token:
            raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!")
        if not self.n8n_api_key:
            raise ValueError("N8N_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!")
        
        # –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        allowed_users = os.getenv('ALLOWED_USERS', '')
        if not allowed_users:
            raise ValueError("ALLOWED_USERS –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!")
        
        self.allowed_users = [int(user_id.strip()) for user_id in allowed_users.split(',') if user_id.strip()]
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.app = Application.builder().token(self.bot_token).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self.app.add_handler(CommandHandler("start", self.start_command))
        self.app.add_handler(CommandHandler("help", self.help_command))
        self.app.add_handler(CommandHandler("status", self.status_command))
        self.app.add_handler(CallbackQueryHandler(self.button_handler))
    
    def check_permission(self, user_id):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞"""
        return user_id in self.allowed_users
    
    def get_main_keyboard(self):
        """–ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞"""
        keyboard = [
            [
                InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å n8n", callback_data="status"),
                InlineKeyboardButton("üìã Workflows", callback_data="workflows")
            ],
            [
                InlineKeyboardButton("üöÄ –í—ã–ø–æ–ª–Ω–µ–Ω–∏—è", callback_data="executions"),
                InlineKeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")
            ],
            [
                InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")
            ]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    def get_workflow_keyboard(self, workflow_id, is_active):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º workflow"""
        keyboard = []
        
        if is_active:
            keyboard.append([
                InlineKeyboardButton("‚è∏Ô∏è –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"deactivate_{workflow_id}"),
                InlineKeyboardButton("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å", callback_data=f"execute_{workflow_id}")
            ])
        else:
            keyboard.append([
                InlineKeyboardButton("‚ñ∂Ô∏è –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"activate_{workflow_id}"),
                InlineKeyboardButton("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å", callback_data=f"execute_{workflow_id}")
            ])
        
        keyboard.append([
            InlineKeyboardButton("üîô –ö —Å–ø–∏—Å–∫—É", callback_data="workflows"),
            InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–∞—è", callback_data="main")
        ])
        
        return InlineKeyboardMarkup(keyboard)
    
    def get_back_keyboard(self):
        """–ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞"""
        keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main")]]
        return InlineKeyboardMarkup(keyboard)
    
    async def n8n_request(self, endpoint, method='GET'):
        """–ó–∞–ø—Ä–æ—Å –∫ n8n API"""
        url = f"{self.n8n_url}/api/v1/{endpoint}"
        headers = {'X-N8N-API-KEY': self.n8n_api_key}
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.request(method, url, headers=headers) as response:
                    if response.status == 200:
                        return await response.json()
                    else:
                        return {"error": f"HTTP {response.status}"}
        except Exception as e:
            return {"error": str(e)}
    
    async def check_n8n_health(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è n8n"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(f"{self.n8n_url}/healthz") as response:
                    return {"status": "healthy" if response.status == 200 else "unhealthy", "code": response.status}
        except:
            return {"status": "unreachable", "error": "Connection failed"}
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        user_id = update.effective_user.id
        
        if not self.check_permission(user_id):
            await update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
            return
        
        username = update.effective_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        
        welcome_text = f"""ü§ñ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {username}!*

üéØ –Ø –ø–æ–º–æ–≥—É —É–ø—Ä–∞–≤–ª—è—Ç—å n8n workflows —á–µ—Ä–µ–∑ Telegram!

*–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*
‚Ä¢ üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–∞ n8n
‚Ä¢ üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ workflows  
‚Ä¢ üöÄ –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π
‚Ä¢ üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"""
        
        await update.message.reply_text(
            welcome_text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=self.get_main_keyboard()
        )
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /help"""
        user_id = update.effective_user.id
        
        if not self.check_permission(user_id):
            await update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
            return
        
        help_text = """üÜò *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É*

*–ö–æ–º–∞–Ω–¥—ã:*
‚Ä¢ `/start` - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚Ä¢ `/help` - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞  
‚Ä¢ `/status` - –°—Ç–∞—Ç—É—Å n8n

*–§—É–Ω–∫—Ü–∏–∏:*
üîπ *–°—Ç–∞—Ç—É—Å n8n* - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
üîπ *Workflows* - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏
üîπ *–í—ã–ø–æ–ª–Ω–µ–Ω–∏—è* - –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—Å–∫–æ–≤
üîπ *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞* - –∞–Ω–∞–ª–∏—Ç–∏–∫–∞

‚ùì –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å? –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."""
        
        await update.message.reply_text(
            help_text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=self.get_back_keyboard()
        )
    
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /status"""
        user_id = update.effective_user.id
        
        if not self.check_permission(user_id):
            await update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
            return
        
        status_msg = await update.message.reply_text("üîç –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç–∞—Ç—É—Å n8n...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ n8n
        health = await self.check_n8n_health()
        
        if health.get('status') == 'healthy':
            status_icon = "üü¢"
            status_text = "–û–Ω–ª–∞–π–Ω"
        else:
            status_icon = "üî¥" 
            status_text = "–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        workflows_data = await self.n8n_request('workflows')
        workflows = workflows_data.get('data', []) if 'error' not in workflows_data else []
        active_workflows = [w for w in workflows if w.get('active', False)]
        
        status_message = f"""{status_icon} *–°—Ç–∞—Ç—É—Å n8n: {status_text}*

üåê –°–µ—Ä–≤–µ—Ä: `{self.n8n_url}`
üìä –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: `{health.get('code', 'N/A')}`

üìã –í—Å–µ–≥–æ workflows: `{len(workflows)}`
‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: `{len(active_workflows)}`  
‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: `{len(workflows) - len(active_workflows)}`

‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}"""
        
        await status_msg.edit_text(
            status_message,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=self.get_back_keyboard()
        )
    
    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        user_id = query.from_user.id
        
        if not self.check_permission(user_id):
            await query.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
            return
        
        await query.answer()
        data = query.data
        
        if data == "main":
            await self.show_main_menu(query)
        elif data == "status":
            await self.show_status(query)
        elif data == "workflows":
            await self.show_workflows(query)
        elif data == "executions":
            await self.show_executions(query)
        elif data == "stats":
            await self.show_statistics(query)
        elif data == "help":
            await self.show_help(query)
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ workflow
        elif data.startswith("activate_"):
            workflow_id = data.split("_", 1)[1]
            await self.activate_workflow(query, workflow_id)
        elif data.startswith("deactivate_"):
            workflow_id = data.split("_", 1)[1]
            await self.deactivate_workflow(query, workflow_id)
        elif data.startswith("execute_"):
            workflow_id = data.split("_", 1)[1]
            await self.execute_workflow(query, workflow_id)
        elif data.startswith("activate_") or data.startswith("deactivate_") or data.startswith("execute_"):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å workflow
            await self.handle_workflow_action(query, data)
    
    async def show_main_menu(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        message = """üè† *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*

–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:"""
        
        await query.edit_message_text(
            message,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=self.get_main_keyboard()
        )
    
    async def show_status(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å"""
        await query.edit_message_text("üîç –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç–∞—Ç—É—Å n8n...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ
        health = await self.check_n8n_health()
        
        if health.get('status') == 'healthy':
            status_icon = "üü¢"
            status_text = "–û–Ω–ª–∞–π–Ω"
        else:
            status_icon = "üî¥"
            status_text = "–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        
        # –ü–æ–ª—É—á–∞–µ–º workflows
        workflows_data = await self.n8n_request('workflows')
        workflows = workflows_data.get('data', []) if 'error' not in workflows_data else []
        active_workflows = [w for w in workflows if w.get('active', False)]
        
        message = f"""{status_icon} *–°—Ç–∞—Ç—É—Å n8n: {status_text}*

üåê –°–µ—Ä–≤–µ—Ä: `{self.n8n_url}`
üìä –ö–æ–¥: `{health.get('code', 'N/A')}`

üìã –í—Å–µ–≥–æ workflows: `{len(workflows)}`
‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: `{len(active_workflows)}`
‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: `{len(workflows) - len(active_workflows)}`

‚è∞ {datetime.now().strftime('%H:%M:%S')}"""
        
        await query.edit_message_text(
            message,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=self.get_back_keyboard()
        )
    
    async def show_workflows(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å workflows"""
        await query.edit_message_text("üìã –ó–∞–≥—Ä—É–∂–∞—é workflows...")
        
        workflows_data = await self.n8n_request('workflows')
        
        if 'error' in workflows_data:
            message = f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ workflows:\n`{workflows_data['error']}`"
        else:
            workflows = workflows_data.get('data', [])
            
            if not workflows:
                message = "üìã *Workflows*\n\nüîç Workflows –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
            else:
                message = f"üìã *Workflows* (–≤—Å–µ–≥–æ: {len(workflows)})\n\n"
                
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                display_workflows = workflows[:10] if len(workflows) > 10 else workflows
                
                for i, workflow in enumerate(display_workflows):
                    name = workflow.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                    active = workflow.get('active', False)
                    status_icon = "‚úÖ" if active else "‚ùå"
                    workflow_id = workflow.get('id', 'N/A')
                    
                    message += f"{i+1}. {status_icon} *{name}*\n"
                    message += f"   üÜî `{workflow_id}`\n"
                    message += f"   üîÑ {'–ê–∫—Ç–∏–≤–µ–Ω' if active else '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n\n"
                
                if len(workflows) > 10:
                    message += f"... –∏ –µ—â–µ {len(workflows) - 10} workflow(s)\n\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–≤—ã–º workflow –∫–∞–∫ –ø—Ä–∏–º–µ—Ä
                if workflows:
                    first_workflow = workflows[0]
                    first_id = first_workflow.get('id')
                    first_active = first_workflow.get('active', False)
                    if first_id:
                        await query.edit_message_text(
                            message + f"üí° *–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ workflow:*\n`{first_workflow.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}`",
                            parse_mode=ParseMode.MARKDOWN,
                            reply_markup=self.get_workflow_keyboard(first_id, first_active)
                        )
                        return
        
        await query.edit_message_text(
            message,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=self.get_back_keyboard()
        )
    
    async def show_executions(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        await query.edit_message_text("üöÄ –ó–∞–≥—Ä—É–∂–∞—é –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è...")
        
        executions_data = await self.n8n_request('executions?limit=20')
        
        if 'error' in executions_data:
            message = f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π:\n`{executions_data['error']}`"
        else:
            executions = executions_data.get('data', [])
            
            if not executions:
                message = "üöÄ *–í—ã–ø–æ–ª–Ω–µ–Ω–∏—è*\n\nüîç –í—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
            else:
                message = f"üöÄ *–ü–æ—Å–ª–µ–¥–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è* ({len(executions)})\n\n"
                
                for i, execution in enumerate(executions):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                    finished = execution.get('finished', False)
                    success = execution.get('success', False)
                    
                    if finished:
                        status_icon = "‚úÖ" if success else "‚ùå"
                        status_text = "–£—Å–ø–µ—à–Ω–æ" if success else "–û—à–∏–±–∫–∞"
                    else:
                        status_icon = "‚è≥"
                        status_text = "–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è"
                    
                    started = execution.get('startedAt', '')
                    if started:
                        try:
                            started_dt = datetime.fromisoformat(started.replace('Z', '+00:00'))
                            started_str = started_dt.strftime('%d.%m %H:%M')
                        except:
                            started_str = "N/A"
                    else:
                        started_str = "N/A"
                    
                    workflow_name = execution.get('workflowData', {}).get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
                    
                    message += f"{i+1}. {status_icon} *{workflow_name}*\n"
                    message += f"   ‚è∞ {started_str}\n"
                    message += f"   üìä {status_text}\n\n"
        
        await query.edit_message_text(
            message,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=self.get_back_keyboard()
        )
    
    async def show_statistics(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        await query.edit_message_text("üìà –°–æ–±–∏—Ä–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        workflows_data = await self.n8n_request('workflows')
        executions_data = await self.n8n_request('executions?limit=50')
        
        workflows = workflows_data.get('data', []) if 'error' not in workflows_data else []
        executions = executions_data.get('data', []) if 'error' not in executions_data else []
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º workflows
        total_workflows = len(workflows)
        active_workflows = len([w for w in workflows if w.get('active', False)])
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        successful = len([e for e in executions if e.get('finished', False) and e.get('success', False)])
        failed = len([e for e in executions if e.get('finished', False) and not e.get('success', False)])
        running = len([e for e in executions if not e.get('finished', False)])
        
        # –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        today = datetime.now().date()
        today_executions = 0
        for execution in executions:
            started = execution.get('startedAt', '')
            if started:
                try:
                    started_date = datetime.fromisoformat(started.replace('Z', '+00:00')).date()
                    if started_date == today:
                        today_executions += 1
                except:
                    pass
        
        message = f"""üìà *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ n8n*

*Workflows:*
üìã –í—Å–µ–≥–æ: `{total_workflows}`
‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: `{active_workflows}`
‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: `{total_workflows - active_workflows}`

*–í—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 50):*
‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: `{successful}`
‚ùå –° –æ—à–∏–±–∫–∞–º–∏: `{failed}`
‚è≥ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: `{running}`

*–ó–∞ —Å–µ–≥–æ–¥–Ω—è:*
üöÄ –ó–∞–ø—É—Å–∫–æ–≤: `{today_executions}`

‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}"""
        
        await query.edit_message_text(
            message,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=self.get_back_keyboard()
        )
    
    async def show_help(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
        help_text = """üÜò *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É*

*–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:*
üîπ *–°—Ç–∞—Ç—É—Å n8n* - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
üîπ *Workflows* - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏  
üîπ *–í—ã–ø–æ–ª–Ω–µ–Ω–∏—è* - –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—Å–∫–æ–≤
üîπ *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞* - –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã

*–ö–æ–º–∞–Ω–¥—ã:*
‚Ä¢ `/start` - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚Ä¢ `/status` - –°—Ç–∞—Ç—É—Å n8n
‚Ä¢ `/help` - –°–ø—Ä–∞–≤–∫–∞

‚ùì –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å? –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."""
        
        await query.edit_message_text(
            help_text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=self.get_back_keyboard()
        )
    
    async def handle_workflow_action(self, query, action_data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å workflow (–∞–∫—Ç–∏–≤–∞—Ü–∏—è, –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è, –∑–∞–ø—É—Å–∫)"""
        action, workflow_id = action_data.split("_", 1)
        workflow_id = int(workflow_id)
        
        if action == "activate":
            # –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å workflow
            result = await self.n8n_request(f"workflows/{workflow_id}/activate", "POST")
            success = result.get("active", False)
        elif action == "deactivate":
            # –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å workflow
            result = await self.n8n_request(f"workflows/{workflow_id}/deactivate", "POST")
            success = not result.get("active", False)
        elif action == "execute":
            # –ó–∞–ø—É—Å—Ç–∏—Ç—å workflow
            result = await self.n8n_request(f"workflows/{workflow_id}/execute", "POST")
            success = result.get("finished", False) and result.get("success", False)
        else:
            success = False
        
        if success:
            await query.answer("‚úÖ –î–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        else:
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è.")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ workflow
        await self.show_workflows(query)
    
    async def activate_workflow(self, query, workflow_id):
        """–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å workflow"""
        await query.edit_message_text(f"‚è≥ –ê–∫—Ç–∏–≤–∏—Ä—É—é workflow {workflow_id}...")
        
        result = await self.n8n_request(f'workflows/{workflow_id}/activate', 'POST')
        
        if 'error' not in result:
            message = f"‚úÖ *Workflow –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!*\n\nüÜî ID: `{workflow_id}`\n‚è∞ {datetime.now().strftime('%H:%M:%S')}"
        else:
            message = f"‚ùå *–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ workflow*\n\nüÜî ID: `{workflow_id}`\nüìù –û—à–∏–±–∫–∞: `{result['error']}`"
        
        await query.edit_message_text(
            message,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=self.get_back_keyboard()
        )
    
    async def deactivate_workflow(self, query, workflow_id):
        """–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å workflow"""
        await query.edit_message_text(f"‚è≥ –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É—é workflow {workflow_id}...")
        
        result = await self.n8n_request(f'workflows/{workflow_id}/deactivate', 'POST')
        
        if 'error' not in result:
            message = f"‚è∏Ô∏è *Workflow –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!*\n\nüÜî ID: `{workflow_id}`\n‚è∞ {datetime.now().strftime('%H:%M:%S')}"
        else:
            message = f"‚ùå *–û—à–∏–±–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ workflow*\n\nüÜî ID: `{workflow_id}`\nüìù –û—à–∏–±–∫–∞: `{result['error']}`"
        
        await query.edit_message_text(
            message,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=self.get_back_keyboard()
        )
    
    async def execute_workflow(self, query, workflow_id):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å workflow"""
        await query.edit_message_text(f"üöÄ –ó–∞–ø—É—Å–∫–∞—é workflow {workflow_id}...")
        
        result = await self.n8n_request(f'workflows/{workflow_id}/execute', 'POST')
        
        if 'error' not in result:
            execution_id = result.get('data', {}).get('executionId', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            message = f"üöÄ *Workflow –∑–∞–ø—É—â–µ–Ω!*\n\nüÜî Workflow ID: `{workflow_id}`\nüìä Execution ID: `{execution_id}`\n‚è∞ {datetime.now().strftime('%H:%M:%S')}"
        else:
            message = f"‚ùå *–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ workflow*\n\nüÜî ID: `{workflow_id}`\nüìù –û—à–∏–±–∫–∞: `{result['error']}`"
        
        await query.edit_message_text(
            message,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=self.get_back_keyboard()
        )
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ n8n Telegram –±–æ—Ç–∞...")
        logger.info(f"üîó n8n URL: {self.n8n_url}")
        logger.info(f"üë• –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {self.allowed_users}")
        
        self.app.run_polling()

if __name__ == "__main__":
    try:
        bot = SimpleN8NBot()
        bot.run()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        print("\nüí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print("1. –§–∞–π–ª .env —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏")
        print("2. –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å TELEGRAM_BOT_TOKEN")
        print("3. –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å N8N_API_KEY")
        print("4. –°–ø–∏—Å–æ–∫ ALLOWED_USERS")
