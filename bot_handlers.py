"""
–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è N8NTelegramBot
"""
import asyncio
from datetime import datetime
from typing import Dict, List
from telegram import CallbackQuery
from telegram.constants import ParseMode

class BotHandlers:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∏ –¥–µ–π—Å—Ç–≤–∏–π –±–æ—Ç–∞"""
    
    async def _show_main_menu(self, query: CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        message = (
            "üè† *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        await query.edit_message_text(
            message,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=self.keyboards.main_menu()
        )
    
    async def _show_status(self, query: CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å n8n"""
        await query.edit_message_text("üîç –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç–∞—Ç—É—Å n8n...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å n8n
        health_status = await self.n8n_client.get_health_status()
        
        if health_status.get('status') == 'healthy':
            status_icon = "üü¢"
            status_text = "–û–Ω–ª–∞–π–Ω"
        elif health_status.get('status') == 'unhealthy':
            status_icon = "üü°"
            status_text = "–ü—Ä–æ–±–ª–µ–º—ã"
        else:
            status_icon = "üî¥"
            status_text = "–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        workflows = await self.n8n_client.get_workflows()
        active_workflows = [w for w in workflows if w.get('active', False)]
        recent_executions = await self.n8n_client.get_executions(limit=5)
        
        status_message = (
            f"{status_icon} *–°—Ç–∞—Ç—É—Å n8n: {status_text}*\n\n"
            f"üåê –°–µ—Ä–≤–µ—Ä: `{self.config.N8N_BASE_URL}`\n"
            f"üìä –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: `{health_status.get('code', 'N/A')}`\n\n"
            f"üìã –í—Å–µ–≥–æ workflows: `{len(workflows)}`\n"
            f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: `{len(active_workflows)}`\n"
            f"‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: `{len(workflows) - len(active_workflows)}`\n\n"
            f"üöÄ –ü–æ—Å–ª–µ–¥–Ω–∏—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π: `{len(recent_executions)}`\n"
            f"‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}"
        )
        
        await query.edit_message_text(
            status_message,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=self.keyboards.back_to_main()
        )
    
    async def _show_workflows_menu(self, query: CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
        message = (
            "üìã *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—á–∏–º–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        await query.edit_message_text(
            message,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=self.keyboards.workflows_menu()
        )
    
    async def _show_executions_menu(self, query: CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π"""
        message = (
            "üöÄ *–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:"
        )
        await query.edit_message_text(
            message,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=self.keyboards.executions_menu()
        )
    
    async def _show_management_menu(self, query: CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        message = (
            "‚öôÔ∏è *–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è*\n\n"
            "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:"
        )
        await query.edit_message_text(
            message,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=self.keyboards.management_menu()
        )
    
    async def _show_statistics(self, query: CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        await query.edit_message_text("üìä –°–æ–±–∏—Ä–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        workflows = await self.n8n_client.get_workflows()
        executions = await self.n8n_client.get_executions(limit=50)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        total_workflows = len(workflows)
        active_workflows = len([w for w in workflows if w.get('active', False)])
        
        successful_executions = len([e for e in executions if e.get('finished', False) and e.get('success', False)])
        failed_executions = len([e for e in executions if e.get('finished', False) and not e.get('success', False)])
        running_executions = len([e for e in executions if not e.get('finished', False)])
        
        # –ü–æ–¥—Å—á–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        today = datetime.now().date()
        today_executions = []
        for execution in executions:
            started = execution.get('startedAt', '')
            if started:
                try:
                    started_date = datetime.fromisoformat(started.replace('Z', '+00:00')).date()
                    if started_date == today:
                        today_executions.append(execution)
                except:
                    pass
        
        statistics_message = (
            "üìà *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ n8n*\n\n"
            "*–†–∞–±–æ—á–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã:*\n"
            f"üìã –í—Å–µ–≥–æ: `{total_workflows}`\n"
            f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: `{active_workflows}`\n"
            f"‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: `{total_workflows - active_workflows}`\n\n"
            "*–í—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 50):*\n"
            f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: `{successful_executions}`\n"
            f"‚ùå –° –æ—à–∏–±–∫–∞–º–∏: `{failed_executions}`\n"
            f"‚è≥ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: `{running_executions}`\n\n"
            f"*–ó–∞ —Å–µ–≥–æ–¥–Ω—è:*\n"
            f"üöÄ –ó–∞–ø—É—Å–∫–æ–≤: `{len(today_executions)}`\n"
            f"‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}"
        )
        
        await query.edit_message_text(
            statistics_message,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=self.keyboards.back_to_main()
        )
    
    async def _show_help(self, query: CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
        help_text = (
            "üÜò *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É n8n Manager*\n\n"
            "*–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:*\n"
            "üîπ *–°—Ç–∞—Ç—É—Å n8n* - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏\n"
            "üîπ *–†–∞–±–æ—á–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã* - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ workflows\n"
            "üîπ *–í—ã–ø–æ–ª–Ω–µ–Ω–∏—è* - –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—Å–∫–æ–≤\n"
            "üîπ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ* - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏\n"
            "üîπ *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞* - –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n\n"
            "*–ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
            "‚Ä¢ `/start` - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "‚Ä¢ `/status` - –°—Ç–∞—Ç—É—Å n8n\n"
            "‚Ä¢ `/workflows` - –°–ø–∏—Å–æ–∫ workflows\n"
            "‚Ä¢ `/help` - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
            "‚ùì –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å? –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
        
        await query.edit_message_text(
            help_text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=self.keyboards.back_to_main()
        )
    
    async def _list_workflows(self, query: CallbackQuery, active_only: bool = False, inactive_only: bool = False):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
        await query.edit_message_text("üìã –ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ workflows...")
        
        workflows = await self.n8n_client.get_workflows()
        
        if active_only:
            workflows = [w for w in workflows if w.get('active', False)]
            title = "‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞–±–æ—á–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã"
        elif inactive_only:
            workflows = [w for w in workflows if not w.get('active', False)]
            title = "‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞–±–æ—á–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã"
        else:
            title = "üìã –í—Å–µ —Ä–∞–±–æ—á–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã"
        
        if not workflows:
            message = f"{title}\n\nüîç –†–∞–±–æ—á–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
            await query.edit_message_text(
                message,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=self.keyboards.workflows_menu()
            )
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 workflows
        message = f"*{title}*\n\n"
        for i, workflow in enumerate(workflows[:5]):
            message += f"{i+1}. {self._format_workflow_info(workflow)}\n\n"
        
        if len(workflows) > 5:
            message += f"... –∏ –µ—â–µ {len(workflows) - 5} workflow(s)\n\n"
        
        message += f"üìä –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: `{len(workflows)}`"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ workflow
        keyboard = []
        if workflows:
            first_workflow = workflows[0]
            workflow_id = first_workflow.get('id')
            is_active = first_workflow.get('active', False)
            
            if workflow_id:
                keyboard = self.keyboards.workflow_actions(workflow_id, is_active).inline_keyboard
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
        keyboard.append([
            InlineKeyboardButton("üîô –ö –º–µ–Ω—é workflows", callback_data="workflows"),
            InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–∞—è", callback_data="main_menu")
        ])
        
        from telegram import InlineKeyboardMarkup, InlineKeyboardButton
        await query.edit_message_text(
            message,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    async def _list_executions(self, query: CallbackQuery, success_only: bool = False, 
                             failed_only: bool = False, running_only: bool = False):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π"""
        await query.edit_message_text("üöÄ –ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π...")
        
        executions = await self.n8n_client.get_executions(limit=20)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        if success_only:
            executions = [e for e in executions if e.get('finished', False) and e.get('success', False)]
            title = "‚úÖ –£—Å–ø–µ—à–Ω—ã–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"
        elif failed_only:
            executions = [e for e in executions if e.get('finished', False) and not e.get('success', False)]
            title = "‚ùå –í—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å –æ—à–∏–±–∫–∞–º–∏"
        elif running_only:
            executions = [e for e in executions if not e.get('finished', False)]
            title = "‚è≥ –í—ã–ø–æ–ª–Ω—è—é—â–∏–µ—Å—è –ø—Ä–æ—Ü–µ—Å—Å—ã"
        else:
            title = "üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"
        
        if not executions:
            message = f"{title}\n\nüîç –í—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
            await query.edit_message_text(
                message,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=self.keyboards.executions_menu()
            )
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π
        message = f"*{title}*\n\n"
        for i, execution in enumerate(executions[:5]):
            message += f"{i+1}. {self._format_execution_info(execution)}\n\n"
        
        if len(executions) > 5:
            message += f"... –∏ –µ—â–µ {len(executions) - 5} –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ(–π)\n\n"
        
        message += f"üìä –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: `{len(executions)}`"
        
        await query.edit_message_text(
            message,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=self.keyboards.executions_menu()
        )
    
    async def _activate_workflow(self, query: CallbackQuery, workflow_id: str):
        """–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å"""
        await query.edit_message_text(f"‚è≥ –ê–∫—Ç–∏–≤–∏—Ä—É—é workflow {workflow_id}...")
        
        result = await self.n8n_client.activate_workflow(workflow_id)
        
        if 'error' not in result:
            message = f"‚úÖ Workflow `{workflow_id}` —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!"
        else:
            message = f"‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ workflow `{workflow_id}`:\n`{result['error']}`"
        
        await query.edit_message_text(
            message,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=self.keyboards.back_to_main()
        )
    
    async def _deactivate_workflow(self, query: CallbackQuery, workflow_id: str):
        """–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å"""
        await query.edit_message_text(f"‚è≥ –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É—é workflow {workflow_id}...")
        
        result = await self.n8n_client.deactivate_workflow(workflow_id)
        
        if 'error' not in result:
            message = f"‚è∏Ô∏è Workflow `{workflow_id}` —É—Å–ø–µ—à–Ω–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!"
        else:
            message = f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ workflow `{workflow_id}`:\n`{result['error']}`"
        
        await query.edit_message_text(
            message,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=self.keyboards.back_to_main()
        )
    
    async def _execute_workflow(self, query: CallbackQuery, workflow_id: str):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å"""
        await query.edit_message_text(f"üöÄ –ó–∞–ø—É—Å–∫–∞—é workflow {workflow_id}...")
        
        result = await self.n8n_client.execute_workflow(workflow_id)
        
        if 'error' not in result:
            execution_id = result.get('data', {}).get('executionId', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            message = f"üöÄ Workflow `{workflow_id}` —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!\n\nüìä ID –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: `{execution_id}`"
        else:
            message = f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ workflow `{workflow_id}`:\n`{result['error']}`"
        
        await query.edit_message_text(
            message,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=self.keyboards.back_to_main()
        )
    
    async def _show_workflow_status(self, query: CallbackQuery, workflow_id: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞"""
        await query.edit_message_text(f"üìä –ü–æ–ª—É—á–∞—é —Å—Ç–∞—Ç—É—Å workflow {workflow_id}...")
        
        workflow = await self.n8n_client.get_workflow_status(workflow_id)
        
        if 'error' not in workflow:
            message = f"üìä *–°—Ç–∞—Ç—É—Å Workflow*\n\n{self._format_workflow_info(workflow)}"
        else:
            message = f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ workflow `{workflow_id}`:\n`{workflow['error']}`"
        
        await query.edit_message_text(
            message,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=self.keyboards.back_to_main()
        )
    
    async def _stop_execution(self, query: CallbackQuery, execution_id: str):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ"""
        await query.edit_message_text(f"‚èπÔ∏è –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ {execution_id}...")
        
        result = await self.n8n_client.stop_execution(execution_id)
        
        if 'error' not in result:
            message = f"‚èπÔ∏è –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ `{execution_id}` —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!"
        else:
            message = f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è `{execution_id}`:\n`{result['error']}`"
        
        await query.edit_message_text(
            message,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=self.keyboards.back_to_main()
        )
    
    async def _show_execution_details(self, query: CallbackQuery, execution_id: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        await query.edit_message_text(f"üìä –ü–æ–ª—É—á–∞—é –¥–µ—Ç–∞–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è {execution_id}...")
        
        execution = await self.n8n_client.get_execution_details(execution_id)
        
        if 'error' not in execution:
            message = f"üìä *–î–µ—Ç–∞–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è*\n\n{self._format_execution_info(execution)}"
        else:
            message = f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è `{execution_id}`:\n`{execution['error']}`"
        
        await query.edit_message_text(
            message,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=self.keyboards.back_to_main()
        )
    
    async def _refresh_all(self, query: CallbackQuery):
        """–û–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ"""
        await query.edit_message_text("üîÑ –û–±–Ω–æ–≤–ª—è—é –≤—Å–µ –¥–∞–Ω–Ω—ã–µ...")
        
        # –≠–º—É–ª–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        await asyncio.sleep(2)
        
        message = (
            "‚úÖ *–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!*\n\n"
            "üîÑ –ö—ç—à –æ—á–∏—â–µ–Ω\n"
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–∞\n"
            f"‚è∞ –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {datetime.now().strftime('%H:%M:%S')}"
        )
        
        await query.edit_message_text(
            message,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=self.keyboards.back_to_main()
        )
